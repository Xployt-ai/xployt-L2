{
  "pipelines": [
    {
      "pipeline_name": "Injection Checker",
      "pipeline_id": "pipeline_injection",
      "target_vulnerabilities": ["SQL Injection", "NoSQL Injection", "Command Injection"],
      "description": "Detects injection-type vulnerabilities across stack layers.",
      "stages": [
        {
          "id": "vuln_detection",
          "title": "Vulnerability Detection",
          "prompt_template": "Analyze the following code for SQL, NoSQL, and Command Injection vulnerabilities. Format each vulnerability with file path, line number, description, vulnerability type, severity, and confidence level. Give description in simple and concise manner.",
          "inject_previous_output": false,
          "save_output": true,
          "output_tag": "detected_vulns",
          "schema": "extract_vulnerabilities",
          "example": [
            {
              "file_path": "api/controllers/user.js",
              "line": 42,
              "description": "User input concatenated directly into SQL query without sanitization. Code: `const query = 'SELECT * FROM users WHERE username = \"' + username + '\"';`",
              "vulnerability": "SQL Injection",
              "severity": "High",
              "confidence_level": "High"
            },
            {
              "file_path": "api/services/database.js",
              "line": 128,
              "description": "Template literal used in SQL query without parameterization. Code: `const query = `SELECT * FROM products WHERE category = '${userCategory}'`;`",
              "vulnerability": "SQL Injection",
              "severity": "Medium",
              "confidence_level": "Medium"
            }
          ]
        },
        {
          "id": "remediation",
          "title": "Remediation Suggestions",
          "prompt_template": "Suggest concrete remediations for the injection vulnerabilities listed below. Include specific code changes and best practices for each vulnerability. Maintain all the existing vulnerability information and add detailed remediation instructions. Give description in simple and concise manner.",
          "inject_previous_output": true,
          "input_tag": "detected_vulns",
          "save_output": true,
          "output_tag": "remediation_suggestions",
          "schema": "remediation_suggestions",
          "example": [
            {
              "file_path": "api/controllers/user.js",
              "line": 42,
              "description": "Unsanitized user input directly used in SQL query, allowing potential SQL injection attacks. Code: `const query = 'SELECT * FROM users WHERE username = \"' + username + '\"';`",
              "vulnerability": "SQL Injection",
              "severity": "High",
              "confidence_level": "High",
              "remediation": "Use parameterized queries: `const query = 'SELECT * FROM users WHERE username = ?'; db.query(query, [username]);`"
            },
            {
              "file_path": "api/services/database.js",
              "line": 128,
              "description": "Dynamic query construction using template literals without proper parameterization. Code: `const query = `SELECT * FROM products WHERE category = '${userCategory}'`;`",
              "vulnerability": "SQL Injection",
              "severity": "Medium",
              "confidence_level": "Medium",
              "remediation": "Use parameterized queries: `const query = 'SELECT * FROM products WHERE category = ?'; db.query(query, [userCategory]);` or ORM: `Product.findAll({ where: { category: userCategory } });`"
            }
          ]
        }
      ]
    },
    {
      "pipeline_name": "Auth Flow Audit",
      "pipeline_id": "pipeline_auth",
      "target_vulnerabilities": ["Broken Auth", "IDOR", "Session Hijacking"],
      "description": "Audits authentication & authorization mechanisms.",
      "stages": [
        {
          "id": "auth_map",
          "title": "Auth Flow Mapping",
          "prompt_template": "Analyze and describe the authentication and authorization flow in the following code. Identify key components such as login mechanisms, session management, token validation, permission checking, and user role management. Include file paths and line numbers for important authentication functions and middleware.",
          "inject_previous_output": false,
          "save_output": true,
          "output_tag": "auth_flow"
        },
        {
          "id": "auth_issues",
          "title": "Auth Vulnerability Detection",
          "prompt_template": "Based on the described authentication and authorization flow, identify potential security weaknesses and vulnerabilities. Focus on issues like broken authentication, insecure direct object references (IDOR), session hijacking, missing authorization checks, and insecure token management. Format each vulnerability with file path, line number, detailed description, vulnerability type, severity, and confidence level. Give description in simple and concise manner.",
          "inject_previous_output": true,
          "input_tag": "auth_flow",
          "save_output": true,
          "output_tag": "auth_vulns",
          "schema": "extract_vulnerabilities",
          "example": [
            {
              "file_path": "auth/middleware.js",
              "line": 25,
              "description": "JWT verification lacks expiration and revocation checks. Code: `function verifyToken(token) { const decoded = jwt.verify(token, SECRET_KEY); return decoded; }`",
              "vulnerability": "Broken Authentication",
              "severity": "High",
              "confidence_level": "High"
            },
            {
              "file_path": "api/routes/user.js",
              "line": 57,
              "description": "Endpoint lacks authorization check for user data access. Code: `router.get('/users/:id', (req, res) => { const userData = getUserById(req.params.id); res.json(userData); });`",
              "vulnerability": "Insecure Direct Object Reference",
              "severity": "Medium",
              "confidence_level": "High"
            }
          ]
        },
        {
          "id": "auth_remedy",
          "title": "Remediation Suggestions",
          "prompt_template": "Suggest detailed remediations for the identified authentication and authorization vulnerabilities. Include specific code changes, security best practices, library recommendations, and implementation patterns to address each vulnerability. Maintain all the existing vulnerability information and add detailed remediation instructions. Give description in simple and concise manner.",
          "inject_previous_output": true,
          "input_tag": "auth_vulns",
          "save_output": true,
          "output_tag": "remediation_suggestions",
          "schema": "remediation_suggestions",
          "example": [
            {
              "file_path": "auth/middleware.js",
              "line": 25,
              "description": "Missing token validation allows for JWT token replay attacks. Code: `function verifyToken(token) { const decoded = jwt.verify(token, SECRET_KEY); return decoded; }`",
              "vulnerability": "Broken Authentication",
              "severity": "High",
              "confidence_level": "High",
              "remediation": "Add expiration and revocation checks: Check `decoded.exp`, validate against token blacklist, and verify `iss` and `aud` claims."
            },
            {
              "file_path": "api/routes/user.js",
              "line": 57,
              "description": "The endpoint retrieves user data based on user ID from the URL without checking if the requesting user has permission to access this data, enabling IDOR attacks. Code: `router.get('/users/:id', (req, res) => { const userData = getUserById(req.params.id); res.json(userData); });`",
              "vulnerability": "Insecure Direct Object Reference",
              "severity": "Medium",
              "confidence_level": "High",
              "remediation": "Add authorization: Verify `req.params.id === req.user.id` or `req.user.role === 'admin'` before accessing data. Return 403 if unauthorized."
            }
          ]
        }
      ]
    }
  ]
}
