{
  "pipelines": [
    {
      "pipeline_name": "Injection Checker",
      "pipeline_id": "pipeline_injection",
      "target_vulnerabilities": ["SQL Injection", "NoSQL Injection", "Command Injection"],
      "description": "Detects injection-type vulnerabilities across stack layers.",
      "stages": [
        {
          "id": "injection_analysis",
          "title": "Injection Vulnerability Analysis with Remediation",
          "prompt_template": "Analyze the following code for SQL, NoSQL, and Command Injection vulnerabilities. For each vulnerability found, provide the file path, code snippet, description, vulnerability type, severity, confidence level, AND a concrete remediation suggestion. Give descriptions and remediations in simple and concise manner. At most give 3 vulnerabilities.",
          "inject_previous_output": false,
          "save_output": true,
          "output_tag": "vulnerabilities_with_remediations",
          "example": [
            {
              "file_path": "api/controllers/user.js",
              "code_snippet": "const query = 'SELECT * FROM users WHERE username = \"' + username + '\"';",
              "description": "User input concatenated directly into SQL query without sanitization.",
              "vulnerability": "SQL Injection",
              "severity": "High",
              "confidence_level": "High",
              "remediation": "Use parameterized queries: `const query = 'SELECT * FROM users WHERE username = ?'; db.query(query, [username]);`"
            }
          ]
        }
      ]
    },
    {
      "pipeline_name": "Auth Flow Audit",
      "pipeline_id": "pipeline_auth",
      "target_vulnerabilities": ["Broken Auth", "IDOR", "Session Hijacking"],
      "description": "Audits authentication & authorization mechanisms.",
      "stages": [
        {
          "id": "auth_analysis",
          "title": "Auth Vulnerability Analysis with Remediation",
          "prompt_template": "Analyze the following code for authentication and authorization vulnerabilities. Focus on issues like broken authentication, insecure direct object references (IDOR), session hijacking, missing authorization checks, and insecure token management. For each vulnerability found, provide the file path, code snippet, description, vulnerability type, severity, confidence level, AND a concrete remediation suggestion. Give descriptions and remediations in simple and concise manner. At most give 3 vulnerabilities.",
          "inject_previous_output": false,
          "save_output": true,
          "output_tag": "vulnerabilities_with_remediations",
          "example": [
            {
              "file_path": "auth/middleware.js",
              "code_snippet": "function verifyToken(token) { const decoded = jwt.verify(token, SECRET_KEY); return decoded; }",
              "description": "JWT verification lacks expiration and revocation checks, allowing token replay attacks.",
              "vulnerability": "Broken Authentication",
              "severity": "High",
              "confidence_level": "High",
              "remediation": "Add expiration and revocation checks: Check `decoded.exp`, validate against token blacklist, and verify `iss` and `aud` claims."
            }
          ]
        }
      ]
    },
    {
      "pipeline_name": "XSS Checker",
      "pipeline_id": "pipeline_xss",
      "target_vulnerabilities": ["Cross-Site Scripting", "DOM XSS", "Reflected XSS", "Stored XSS"],
      "description": "Detects Cross-Site Scripting vulnerabilities in frontend and backend code.",
      "stages": [
        {
          "id": "xss_analysis",
          "title": "XSS Vulnerability Analysis with Remediation",
          "prompt_template": "Analyze the following code for Cross-Site Scripting (XSS) vulnerabilities. Focus on unsanitized user input rendered in HTML, dangerous DOM manipulation, missing output encoding, and unsafe use of innerHTML or dangerouslySetInnerHTML. For each vulnerability found, provide the file path, code snippet, description, vulnerability type, severity, confidence level, AND a concrete remediation suggestion. Give descriptions and remediations in simple and concise manner. At most give 3 vulnerabilities.",
          "inject_previous_output": false,
          "save_output": true,
          "output_tag": "vulnerabilities_with_remediations",
          "example": [
            {
              "file_path": "frontend/components/UserProfile.jsx",
              "code_snippet": "<div dangerouslySetInnerHTML={{__html: userBio}} />",
              "description": "User-provided content rendered without sanitization using dangerouslySetInnerHTML.",
              "vulnerability": "Cross-Site Scripting",
              "severity": "High",
              "confidence_level": "High",
              "remediation": "Use DOMPurify to sanitize HTML: `import DOMPurify from 'dompurify'; <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(userBio)}} />` or render as text: `<div>{userBio}</div>`"
            }
          ]
        }
      ]
    }
  ]
}
